{"meta":{"title":"Baimawen's Blog","subtitle":null,"description":"Blog about Recording Your Learning","author":"白马文","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2019-03-28T15:58:14.000Z","updated":"2019-03-28T15:58:54.374Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"这里编写您的网站/博客的相关介绍：联系方式、更新日志、甚至是您的个人简历。 BMW 主题会自动渲染此篇markdown，并且在 http://localhost:4000/about/ 展示给您！ 作者: 董沅鑫链接: https://godbmw.com/passages/2018-11-15-theme-bmw-docs-zh/来源: godbmw.com著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"},{"title":"categories","date":"2019-03-28T15:56:52.000Z","updated":"2019-03-28T15:57:20.761Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2019-03-28T15:59:08.000Z","updated":"2019-03-28T15:59:33.035Z","comments":true,"path":"friends/index.html","permalink":"http://yoursite.com/friends/index.html","excerpt":"","text":"这里编写您的友链声明，您可以陈述您的友链申请规则。 BMW 主题会自动渲染此篇markdown，并且在 http://localhost:4000/friends/ 展示给您！"},{"title":"tags","date":"2019-03-28T15:54:58.000Z","updated":"2019-03-28T15:55:22.225Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Centos7安装数据库","slug":"Centos7安装数据库","date":"2019-04-20T12:45:55.000Z","updated":"2019-04-20T12:47:01.270Z","comments":true,"path":"2019/04/20/Centos7安装数据库/","link":"","permalink":"http://yoursite.com/2019/04/20/Centos7安装数据库/","excerpt":"","text":"MySQL 下载源安装包 wget http://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm 安装源 yum -y install mysql57-community-release-el7-11.noarch.rpm 安装MySQL服务器 yum install mysql-community-server 启动并设置开机自启 systemctl start mysqld.service systemctl enable mysqld.service 初始化数据库密码 grep &quot;password&quot; /var/log/mysqld.log #修改默认密码策略 set global validate_password_policy=0; set global validate_password_length=1; set password = password(&#39;123456&#39;); #设置密码 数据库授权 mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION; Redis 下载安装包 wget http://download.redis.io/releases/redis-4.0.6.tar.gz 解压Redis mkidr /usr/local/redis tar -zxvf redis-4.0.6.tar.gz -C /usr/local/redis/ 安装gcc依赖 yum install gcc 编译安装 cd /usr/local/redis/redis-4.0.6 make MALLOC=libc cd src &amp;&amp; make install","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"Centos","slug":"Centos","permalink":"http://yoursite.com/tags/Centos/"}]},{"title":"Pig简单了解","slug":"Pig简单了解","date":"2019-04-20T12:41:43.000Z","updated":"2019-04-20T12:42:32.790Z","comments":true,"path":"2019/04/20/Pig简单了解/","link":"","permalink":"http://yoursite.com/2019/04/20/Pig简单了解/","excerpt":"","text":"定义Apache Pig是MapReduce的一个抽象，是一个工具/平台，用于分析较大的数据集，并将它们表示为数据流。 可以使用Pig在Hadoop中执行所有的数据处理的操作 下载地址：[ http://mirrors.shu.edu.cn/apache/pig/pig-0.17.0/ ] 先决条件：在运行在Apache Pig之前，必须在系统上安装h好Hadooph和Java 安装123456789101112131415# 创建pig存放目录mkdir /opt/pig# 解压pigtar xvf tar xvf pig-0.17.0.tar.gzmv pig-0.17.0/* /opt/pig# 添加环境变量export PIG_HOME=/opt/pigexport PIG_CLASSPATH=$PIG_HOME/confexport PATH=$PIG_HOME/bin:$PATH# 查看是否配置成功pig -version Pig的执行模式和机制模式 Local模式(pig -x local) 在此模式下，所有文件都从本地主机和本地文件系统加载，通常用于测试。 MapReduce模式(pig -x mapreduce) 使用Pig加载或处理Hadoop文件系统中存在的数据的地方。在这种模式下， 每当执行Pig语句来处理数据时，会在后端调用一个MapReduce作业。 执行机制通过三种方式执行，即交互模式 交互模式（Grunt shell） 在此shell中，可以输入Pig Latin语句并获取输出（使用Dump运算符） 批处理模式（脚本） 可以将Pig Latin脚本写入具有.pig扩展名的单个文件中，以批处理模式运行 嵌入式模式（UDF） Pig允许在Java等编程语言中定义自己的函数，并在脚本中运行 Pig Grunt Shell示例：sh ls调用Linux shell 的ls命令 示例： fs -ls调用HDFS的ls命令 示例： exec /sample_script.pig从Grunt shell执行Pig脚本 示例： run /sample_script.pig从Grunt shell运行Pig脚本 exec和run命令之间的区别是，如果使用run，则脚本中的语句在historym命令中可用 Pig LatinPig Latin适用于使用Pig分析Hadoop中数据的语言 数据模型Pig的数据模型是完全嵌套的。 包是元组的集合 元组是有序的字段集 字段是一段数据 类型结构运算符() -&gt; 元组构造函数运算符，用于构建元组 {} -&gt; 包构造函数运算符，用于构造包 -&gt; 示例:{（Raju,30）,（Mohammad,45）} [] -&gt; 映射构造函数运算符，用于构造一个映射 -&gt; 示例：[name＃Raja,age＃30] 关系运算符 运算符 描述 加载和存储 LOAD 将数据从文件系统(local/HDFS)加载到关系中 STORE 将数据从文件系统(local/HDFS)存储到关系中 过滤 FILTER 从关系中删除不需要的行 DISTINCT 从关系中删除重复行 FOREACH, GENERATE 基于数据列生成数据转换 STREAM 使用外部程序转换关系 分组和连接 JOIN 连接两个或多个关系 COGROUP 将数据分组为两个或多个关系 GROUP 在单个关系中对数据进行分组 CROSS 创建两个或多个关系的向量积 排序 ORDER 基于一个或多个字段（升序或降序）排列关系 LIMIT 从关系中获取有限数量的元组 诊断运算符 DUMP 在控制台打印关系的内容 LOAD 运算符语法： load语句由两部分组成，用“=”运算符分隔。 左侧是想要存储数据的关系的名称 右侧是需要定义如何存储数据 Relation_name = LOAD &#39;Input file path&#39; USING function as schema; releation_name：必须要提到要存储的关系 Input file path：必须提到存储文件的HDFS目录(MapReduce模式) function：必须从Pig提供的一组加载函数中选择一个函数(BigStorage, JsonLoader, PigStorage, TextLoader) schema：必须定义数据的模式 PigStorage() 函数，将数据加载并存储为结构化文本文件。它采用分隔符，使用元组的每个实体作为参数分隔。默认情况下，它以“\\t”作为参数。 STORE 存储数据语法：STORE Relation_name INTO &#39;required_directory_path&#39; [USING function]; Group运算符用于在一个或多个关系中对数据进行分组，它收集具有相同key的数据 语法：Group_data = GROUP Relation_name BY age; Foreach运算符用于基于列数据生成指定的数据转换 语法：Relation_name2 = FOREACH Relation_name1 GENRATE (required data);","categories":[{"name":"Bigdata","slug":"Bigdata","permalink":"http://yoursite.com/categories/Bigdata/"}],"tags":[{"name":"Pig","slug":"Pig","permalink":"http://yoursite.com/tags/Pig/"}]},{"title":"XML & Tomcat","slug":"XML&Tomcat","date":"2019-03-28T15:27:20.000Z","updated":"2019-03-28T17:55:13.760Z","comments":true,"path":"2019/03/28/XML&Tomcat/","link":"","permalink":"http://yoursite.com/2019/03/28/XML&Tomcat/","excerpt":"","text":"XML &amp; Tomcat 被设计用来传输和存储数据 查看XML文件XMl文件中包含了许多的元素，XML格式的信息和其它标记的基本单元，以及各种各样的数据。 在所有的主流的浏览器中，均能够查看原始的XML文件 什么是XML 指可扩展标记语言（EXtendsible Markup Language） 是一种很像HTML的标记语言 设计宗旨是传输数据，而不是显示数据 标签没有被预定义，需要自行定义 被设计为具有自我描述性 和HTML的差异 XML是被设计用来传输和存储数据，其焦点是数据的内容 HTML被设计用来显示数据，其焦点是数据的外观 XML用于传输数据，而HTML用于格式化并显示数据 定义XML 文档声明version：解析这个xml的时候，使用什么版本的解析器解析encoding：解析xml中的文字的时候，使用什么编码来翻译 standalone：no - 该文档会依赖关联其它文档 yes - 这是一个独立的文档&lt;?xml version=”1.0” encoding=”UTF-8” standalone=”no”?&gt; 使用CSS来格式化XML文档 &lt;?xml-stylesheet type=”text/css” href=”cd_catalog.css”?&gt;使用CSS格式化XML不是常用的方法 使用XSLT显示XML 通过使用XSLT，可以把XMl文档转换HTML格式 XSLT是首选的XML样式表语言 (eXtensible Stylesheet Language Transformations) XML命名规则 名称可以包含字母、数字以及其它的字符 名称不能以数字或者标点符号开始 名称不能以字母xml（或者XML、Xml等等）开始 名称不能包含空格 XML DTD（Document Type Definition）文档类型定义 拥有正确语法的XMl被称为“形式良好”的XMl 文档必须有一个根元素 元素都必须有一个关闭标签 标签对大小写敏感 元素必须被正确的嵌套 属性值必须加双引号 DTD的作用 DTD是一种保证XML文档格式正确的有效方法，可以通过比较XML文档和DTD文件来看文档是否符合规范，元素和标签使用是否正确 XML文件提供应用程序一个数据交换的格式，DTD正是让XML能够成为数据交换的标准。 DTD文件是一个ASCII的文本文件，后缀名为.dtd 通过引入的方式：12345文档类型 根标签名字 网络上的dtd dtd的路径&lt;!DOCTYPE stus PUBLIC &quot;//UNKNOWN/&quot; &quot;unknown.dtd&quot;&gt;本地的为&lt;!DOCTYPE stus SYSTEM &quot;stus.dtd&quot;&gt; 直接在XML里面嵌入DTD的约束规则：1234567891011121314151617&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE stus [ &lt;!ELEMENT stus (stu)&gt; &lt;!ELEMENT stu (name,age,address)&gt; &lt;!ELEMENT name (#PCDATA)&gt; &lt;!ELEMENT age (#PCDATA)&gt; &lt;!ELEMENT address (#PCDATA)&gt;]&gt;&lt;stus&gt; &lt;stu&gt; &lt;name&gt;李四&lt;/name&gt; &lt;age&gt;12&lt;/age&gt; &lt;address&gt;武汉&lt;/address&gt; &lt;/stu&gt;&lt;/stus&gt; XML Schema约束文档12345678910111213141516171819202122232425262728293031&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!-- xmlns-&gt;xml namespace 命名空间 目标名称空间，下面的那些元素都与这个命名空间绑定上 targetNamespace=\"http://www.example.org/teacher\" 元素的格式化情况 elementFormDefault=\"qualified\"&gt; --&gt; &lt;schema xmlns=\"http://www.w3.org/2001/XMLSchema\" targetNamespace=\"http://www.example.org/teacher\" xmlns:tns=\"http://www.example.org/teacher\" elementFormDefault=\"qualified\"&gt; &lt;element name=\"teachers\"&gt; &lt;complexType&gt; &lt;sequence maxOccurs=\"unbounded\"&gt; &lt;!-- 这是一个复杂元素 --&gt; &lt;element name=\"teacher\"&gt; &lt;!-- 这是用于声明teacher元素是复杂元素 --&gt; &lt;complexType&gt; &lt;sequence&gt; &lt;!-- 以下两个是简单元素 --&gt; &lt;element name=\"name\" type=\"string\"&gt;&lt;/element&gt; &lt;element name=\"age\" type=\"int\"&gt;&lt;/element&gt; &lt;/sequence&gt; &lt;/complexType&gt; &lt;/element&gt; &lt;/sequence&gt; &lt;/complexType&gt; &lt;/element&gt;&lt;/schema&gt; 实例文档123456789101112131415161718&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!-- xmlns:xsi 必须是这样的写法，也就是这个值固定了 xmlns 这里是命名空间，也固定了，写的是schema里面的顶部目标命名空间 xsi:schemaLocation 有两段，前面是命名空间，也就是目标空间的值，后面是约束文档的路径 --&gt; &lt;teachers xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.w3.org/2001/XMLSchema\" xsi:schemaLocation=\"http://www.w3.org/2001/XMLSchema teacher.xsd\"&gt; &lt;teacher&gt; &lt;name&gt;z&lt;/name&gt; &lt;age&gt;12&lt;/age&gt; &lt;/teacher&gt; &lt;teacher&gt; &lt;name&gt;z&lt;/name&gt; &lt;age&gt;12&lt;/age&gt; &lt;/teacher&gt;&lt;/teachers&gt; 命名空间的作用一个xml如果想指定它的约束规则，假设使用的是DTD，那么这个xml只能指定一个DTD 但是如果一个xml的约束是定义在schema里面，并且是多个schema，那么是可以的。 简单来说：一个xml可以引用多个schema约束，但是只能引用一个DTD约束。 名称空间的作用就是在写元素的时候，可以指定该元素使用的是哪一套约束规则。 默认情况下，如果只有一套规则，那么都可以这么写。 123&lt;name&gt;zhangsan&lt;/name&gt;&lt;aa:name&gt;&lt;/name&gt;&lt;bb:name&gt;&lt;/name&gt; XMl解析方式 DOM：document object model 把整个xml全部读到内从当中，形成树状结构。 整个文档称之为document对象 属性对应Attribute对象 所有的元素节点对应Element对象 文本称之为Text对象 以上所有对象都可称之为Node节点 SAX：Simple API for Xml 基于事件驱动 不可以进行增删，只能查询 Dom4j 基本用法element.element(“stu”); 返回该元素下的第一个stu元素element.elements(); 返回该元素下的所有子元素 创建SaxReader对象 指定解析的xml 获取根元素 根据根元素获取子元素或者下面的子孙元素 1234567891011121314151617181920212223try &#123; // 1. 创建sax读取对象 SAXReader reader = new SAXReader(); // 2. 指定解析的xml文件 Document document = reader.read(new File(\"src/xml/stus.xml\")); // 3. 得到元素 Element rootElement = document.getRootElement(); String name = rootElement.element(\"stu\").element(\"name\").getStringValue(); //System.out.println(name); // 获取根元素下的所有元素 List&lt;Element&gt; elements = rootElement.elements(); for (Element element : elements) &#123; String value1 = element.getStringValue(); String value2 = element.element(\"name\").getText(); System.out.println(value2); &#125; &#125; catch (Exception e) &#123; // TODO: handle exception e.printStackTrace(); &#125; Dom4j的Xpath使用 添加jar包依赖 jaxen-1.1-beta-6.jar 在查找指定节点的时候，根据Xpath语法规则来查找 后续的代码与以前的解析一样 1234567891011// 要想使用Xpath，还得添加支持的jar:jaxen// 获取的是第一个，只返回一个Element nameElement = (Element) rootElement.selectSingleNode(\"//name\");System.out.println(nameElement.getName());// 获取文档里面的所有name元素List&lt;Element&gt; list = rootElement.selectNodes(\"//name\");for (Element element : list) &#123; System.out.println(element.getText());&#125; Tomcat目录bin 包含了一些jar，bat文件 startup.bat conf tomcat的配置 server.xml web.xml lib tomcat运行所需的jar文件 logs 运行的日志文件 temp 临时文件 webapps 发布到tomcat服务器上的项目 work jsp翻译成class文件存放地 配置虚拟路径 在conf/server.xml 找到Host元素节点 加入以下内容 OR 在tomcat/conf/catalina/localhost/ 文件夹下新建一个xml文件，名字自定义 在这个文件里面写入 &lt;?xml version=”1.0” encoding=”UTF-8”?&gt; 访问：http://localhost:8080/person/xml名字即可","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"XML","slug":"XML","permalink":"http://yoursite.com/tags/XML/"},{"name":"Tomcat","slug":"Tomcat","permalink":"http://yoursite.com/tags/Tomcat/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-03-28T14:52:25.722Z","updated":"2019-03-28T14:52:25.722Z","comments":true,"path":"2019/03/28/hello-world/","link":"","permalink":"http://yoursite.com/2019/03/28/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}